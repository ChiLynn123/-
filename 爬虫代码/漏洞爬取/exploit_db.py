import time
from selenium import webdriver
from bs4 import BeautifulSoup
import requests
import pymysql
import pandas as pd
from email.mime.text import MIMEText
from email.mime.multipart import MIMEMultipart
import smtplib

caps = {
    'browserName': 'chrome',
    'loggingPrefs': {
        'browser': 'ALL',
        'driver': 'ALL',
        'performance': 'ALL',
    },
    'goog:chromeOptions': {
        'perfLoggingPrefs': {
            'enableNetwork': True,
        },
        'w3c': False,
    },
}
caps['goog:loggingPrefs'] = {'performance': 'ALL'}

# driver = webdriver.Chrome(desired_capabilities=caps)

# todo 填写自己的path
driver = webdriver.Chrome(executable_path='E:/Anaconda/chromedriver.exe')
driver.maximize_window()
driver.get("https://www.exploit-db.com/")
driver.implicitly_wait(4)
time.sleep(3)
driver.find_element_by_xpath('//*[@id="app"]/div/div/div[2]/div[1]/div[1]/div/div[1]/div[1]/label').click()#筛选信任
time.sleep(3)
next = driver.find_element_by_xpath('//*[@id="exploits-table_next"]/a') # next按钮
next_button = driver.find_element_by_xpath('//*[@id="exploits-table_next"]')


def create_db():
    db = pymysql.connect(host='113.31.114.239', user='root', password='123456', port=53377)
    cursor = db.cursor()
    cursor.execute("Create Database If Not Exists test_db3 Character Set UTF8")
    db.close()


def create_table():
    db = pymysql.connect(host='113.31.114.239', user='root', password='123456', port=53377, db='test_db3', autocommit=True)
    cursor = db.cursor()
    sql = 'CREATE TABLE IF NOT EXISTS test_table3(datetime VARCHAR(255), exploit_download_link VARCHAR(255) NOT NULL, Vulnerable_Application_link VARCHAR(255), title VARCHAR(255),cate VARCHAR(255),plateform VARCHAR(255),author VARCHAR(255),title_link VARCHAR(255),edb_id VARCHAR(255),cve VARCHAR(255),PRIMARY KEY (datetime))'
    cursor.execute(sql)
    db.close()


def count_line():
    db = pymysql.connect(host='113.31.114.239', user='root', password='123456', port=53377, db='test_db3', autocommit=True)
    sq = 'select count(*) from test_table3'
    ss = pd.read_sql(sq, db)
    line = int((str(ss.values).replace('[', '')).replace(']', ''))
    return line


def data_insert(value, count):
    db = pymysql.connect(host='113.31.114.239', user='root', password='123456', port=53377, db='test_db3')
    cursor = db.cursor()
    sql = "INSERT ignore INTO test_table3(datetime, exploit_download_link,Vulnerable_Application_link,title,cate,plateform,author,title_link,edb_id,cve) VALUES(%s,%s,%s,%s,%s,%s,%s,%s,%s,%s)"
    try:
        cursor.execute(sql, value)
        db.commit()
        print('第{}条数据插入完成'.format(count))
    except:
        db.rollback()
        print("第{}条数据插入数据失败".format(count))
    db.close()


def get_detail(title_link):
    """
    进入title_link获取详细信息
    :param title_link:
    :return:
    """
    try:
        headers = {
            'User-Agent': 'Mozilla/5.0 (Windows NT 6.1; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/98.0.4758.102 Safari/537.36',
            'cookie': 'CookieConsent={stamp:%27-1%27%2Cnecessary:true%2Cpreferences:true%2Cstatistics:true%2Cmarketing:true%2Cver:1%2Cutc:1645664704873%2Cregion:%27HK%27}; _ga=GA1.3.1443456981.1645664705; _gid=GA1.3.213069754.1645664705; XSRF-TOKEN=eyJpdiI6ImoxRVc2ZXFIcnJ6UE1QUDNrSjNUZ3c9PSIsInZhbHVlIjoiZ2JZK2txU2YzWWNVUGlCWGhNZ1dBVzdzbTJKTHRYYVZZZTN4eXBwYmVIT1hqQmE4dmdcL2lrQ2c2ZWkzc0U3VzYiLCJtYWMiOiIxYzJhMmM0YzU3NzA5YjM3Y2FjZWRmYzYyNTJhZWExOWU1NTFhZmUzYjViYjlhYmY4Y2JlN2YyNzBjMjg3NjFmIn0%3D; exploit_database_session=eyJpdiI6IkhUOGdtNVIxQWxSTHllZExWYThMaGc9PSIsInZhbHVlIjoiaTJOUDlwcVJYVUlsVHd6QkFTQjBnZHJBak4xSEVkaVpXKzAzXC9Ja1V3RFhQRnVzbnlsUW8rYkZqNFhrZk4yYmIiLCJtYWMiOiJkNzExNjVkNzI3YjVmMmIyYzI5ZmYzMTYwZWE5OGVhMjNmMDAxNDMzMDEwMjQxNzA5N2EwM2FiZGIxNzlhZDA0In0%3D'
        }
        r = requests.get(title_link, headers=headers)
        soup = BeautifulSoup(r.text, 'lxml')
        edb_id = soup.find_all('h6', attrs={'class': 'stats-title'})[0].text.strip()
        try:
            cve = soup.find_all('h6', attrs={'class': 'stats-title'})[1].find('a').text.strip()
        except:
            cve = 'N/A'
        return edb_id, cve
    except:
        return " error1", "error2"

def get_content():
    """
    获取内容
    :return:
    """
    soup = BeautifulSoup(driver.page_source, 'lxml')
    liTags_odd = soup.find_all('tr', attrs={'class': 'odd'})
    liTags_even = soup.find_all('tr', attrs={'class': 'even'})
    liTags = liTags_even + liTags_odd
    count = 0
    for li in liTags:
        try:
            datetime = li.find_all('td')[0].text.strip() #time
            exploit_download_link = 'https://www.exploit-db.com' + li.find('a')['href'] # 下载链接
            try:
                Vulnerable_Application_link = 'https://www.exploit-db.com' + li.find_all('td')[2].find('a')['href']
            except:
                Vulnerable_Application_link = "None"
            title = li.find_all('td')[4].text.strip()
            cate = li.find_all('td')[5].text.strip()   #type
            plateform = li.find_all('td')[6].text.strip()
            author = li.find_all('td')[7].text.strip()
            title_link = 'https://www.exploit-db.com' + li.find_all('td')[4].find('a')['href']
            edb_id, cve = get_detail(title_link)  #点击title_link 进入，获取详细信息

            count += 1
            value = (datetime, exploit_download_link, Vulnerable_Application_link,title,cate,plateform,author,title_link,edb_id,cve)
            print(value)
            data_insert(value, count)
        except:
            continue


def email(data_end, data_begin):
    number = '1115016718@qq.com'
    smtp = 'xolzrxgwjaoigdig'
    to = '1115016718@qq.com'  # 可以是非QQ的邮箱
    mer = MIMEMultipart()

    head = '''
       <p>日期：{}</p>
       <p>新增漏洞个数:{}</p>
   '''.format(time.strftime("%Y-%m-%d %H:%M:%S", time.localtime()), data_end - data_begin)

    mer.attach(MIMEText(head, 'html', 'utf-8'))

    mer['Subject'] = '新增【exploit-db】漏洞信息'  # 邮件主题
    mer['From'] = number  # 发送人
    mer['To'] = to  # 接收人

    s = smtplib.SMTP_SSL('smtp.qq.com', 465)
    s.login(number, smtp)
    s.send_message(mer)  # 发送邮件
    s.quit()
    print('成功发送')


def main():
    count = 0
    # 找到下一next的按钮
    next_button = driver.find_element_by_xpath('//*[@id="exploits-table_next"]')
    while True:
        count += 1
        try:
            if 'disabled' not in next_button.get_attribute('class'):
                time.sleep(3)
                print("正在爬取第{}页".format(count))
                next = driver.find_element_by_xpath('//*[@id="exploits-table_next"]/a')
                next.click()
                get_content()
        except:
            next_button = driver.find_element_by_xpath('//*[@id="exploits-table_next"]')
            if 'disabled' not in next_button.get_attribute('class'):
                time.sleep(3)
                print("正在爬取第{}页".format(count))
                next = driver.find_element_by_xpath('//*[@id="exploits-table_next"]/a')
                next.click()
                get_content()


if __name__ == '__main__':
    create_db()
    create_table()

    data_begin = count_line()
    print("运行之前---》数据库表目前存储条数:{}".format(data_begin))

    main()

    data_end = count_line()
    print("运行之后---》数据库表目前存储条数:{}".format(data_end))

    email(data_end, data_begin)







